#lang poem

(provide <result-strategy>
	 collect-result
	 <all-results-strategy> <one-result-strategy>
	 <n-results-strategy>
	 record-failure!
	 number-of-results number-of-results-so-far
	 <numeric-results-strategy>
	 
	 <search-strategy>
	 next-node! add-node! add-nodes!
	 <list-search-strategy> <dfs> <bfs>
	 <ids-node> 
	 ids-node-depth set-ids-node-depth!
	 ids-node-value set-ids-node-value!

	 <ids>
	 ;;; Not sure whether these should be exported here
	 ;;; Maybe put them into a submodule for testing?
	 nodes set-nodes!
	 initial-nodes set-initial-nodes!
	 max-depth set-max-depth!
	 curr-depth set-curr-depth!
	 need-deepening? set-need-deepening?!

	 collect
	 amb amb* deliver fail
	 amb-list amb-list*

	 an-integer->= an-integer-<= 
	 an-integer-between an-integer-between* an-integer-between**
	 a-multiple-of a-factor-of
	 an-element-of)

(require racket/control)

(define debugging? #f)
(define (debug-printf . args)
  (when debugging?
    (apply printf args)))


;;; Search strategies

(defclass <result-strategy> ())

;; Collect a result.  The value of direct? is #t if this result was
;; directly aborted to the handler, #f otherwise.  Returns three values:
;; * Should the result be collected?
;; * Should the computation continue?
;; * The real value for the computation, for strategies that have to
;;   wrap nodes.
(defgeneric collect-result (strategy node))
(defgeneric record-failure! (strategy))
(defmethod record-failure! (strategy)
  ;; Do nothing.
  #f)

(defclass <all-results-strategy> (<result-strategy>))

(defmethod collect-result ((strategy <all-results-strategy>) node)
  (values (not (eq? node (void))) #t node))

(defclass <one-result-strategy> (<result-strategy>))

(defmethod collect-result ((strategy <one-result-strategy>) node)
  (define node-is-void? (eq? node (void)))
  (values (not node-is-void?) node-is-void? node))

(defclass <n-results-strategy> (<result-strategy>)
  (number-of-results :initvalue 1)
  (number-of-results-so-far :initvalue 0)
  :auto #t
  :autoaccessors :slot)

(defmethod collect-result ((strategy <n-results-strategy>) node)
  ;; TODO: Check for void results
  (inc! (number-of-results-so-far strategy))
  (define continue?
    (< (number-of-results-so-far strategy) (number-of-results strategy)))
  (values #t
	  continue?
	  node))

(defclass <numeric-results-strategy> (<result-strategy>))

(defmethod collect-result ((strategy <numeric-results-strategy>) node)
  (values (number? node) #t node))


(defclass <search-strategy> ()
  (result-strategy :initvalue (make <all-results-strategy>))
  :auto #t
  :autoaccessors :slot)

(defgeneric next-node! ((strategy <search-strategy>)))

(defgeneric add-initial-node! ((strategy <search-strategy>) node))
(defmethod add-initial-node! ((strategy <search-strategy>) node)
  (add-node! strategy node))
;;; Do we need add initial-nodes! as well?

(defgeneric add-node! ((strategy <search-strategy>) node))
(defgeneric add-nodes! ((strategy <search-strategy>) nodes))

(defmethod collect-result ((strategy <search-strategy>) node)
  (collect-result (result-strategy strategy) node))

(defclass <list-search-strategy> (<search-strategy>)
  (nodes :initvalue '())
  :auto #t
  :autoaccessors :slot)

(defmethod next-node! ((strategy <list-search-strategy>))
  (define ks (nodes strategy))
  (if (empty? ks)
      #f
      (begin
	(setf! (nodes strategy) (rest ks))
	(first ks))))


(defclass <dfs> (<list-search-strategy>))

(defmethod add-node! ((strategy <dfs>) k)
  (setf! (nodes strategy)
	 (list* k (nodes strategy))))

(defmethod add-nodes! ((strategy <dfs>) ks)
  (setf! (nodes strategy)
	 (append ks (nodes strategy))))


(defclass <bfs> (<list-search-strategy>))

(defmethod add-node! ((strategy <bfs>) k)
  (setf! (nodes strategy)
	 (append (nodes strategy) (list k))))

(defmethod add-nodes! ((strategy <bfs>) ks)
  (setf! (nodes strategy)
	 (append (nodes strategy) ks)))

(defentityclass <ids-node> ()
  depth
  value
  :auto #t
  :autoaccessors :class-slot)

(defaftermethod initialize ((node <ids-node>) initargs)
  (set-instance-proc! node (ids-node-value node)))

(defaftermethod set-ids-node-value! ((node <ids-node>) value)
  (set-instance-proc! node value))

(defclass <ids> (<search-strategy>)
  (nodes :initvalue '())
  (initial-nodes :initvalue #f)
  (max-depth :initvalue 1)
  (curr-depth :initvalue 0)
  (need-deepening? :initvalue #f)
  :auto #t
  :autoaccessors :slot)

(defmethod collect-result ((strategy <ids>) result)
  (debug-printf "collect-result: ~a\n" result)
  (debug-printf "max-depth: ~a, curr-depth: ~a\n" 
		(max-depth strategy) (curr-depth strategy))
  (if (= (max-depth strategy) (curr-depth strategy))
      (call-next-method)
      (values #f #t #f)))

(defmethod next-node! ((strategy <ids>))
  (define ns (nodes strategy))
  (cond ((empty? ns)
	 (cond ((need-deepening? strategy)
		(unless (initial-nodes strategy)
		  (error "Iterative deepening without initial nodes?"))
		(setf! (need-deepening? strategy) #f)
		(inc! (max-depth strategy))
		(setf! (nodes strategy) (rest (initial-nodes strategy)))
		(let ((node (first (initial-nodes strategy))))
		  (setf! (curr-depth strategy) (ids-node-depth node))
		  node))
	       (else #f)))
	(else
	 (setf! (nodes strategy) (rest ns))
	 (let ((node (first ns)))
	   (setf! (curr-depth strategy) (ids-node-depth node))
	   node))))

(define (maybe-make-ids-node strategy val)
  (if ((curr-depth strategy) . >= . (max-depth strategy))
      (begin (setf! (need-deepening? strategy) #t) 
	     #f)
      (make <ids-node>
	:depth (add1 (curr-depth strategy))
	:value val)))

(define (maybe-make-ids-nodes strategy vals)
  (if ((curr-depth strategy) . >= . (max-depth strategy))
      (begin (setf! (need-deepening? strategy) #t) 
	     #f)
      (map (lambda (val)
	     (make <ids-node>
	       :depth (add1 (curr-depth strategy))
	       :value val))
	   vals)))

(defmethod add-node! ((strategy <ids>) k)
  (let ((new-node (maybe-make-ids-node strategy k)))
    (when new-node
      (unless (initial-nodes strategy)
	(setf! (initial-nodes strategy) (list new-node)))
      (setf! (nodes strategy)
	     (list* new-node (nodes strategy))))))

(defmethod add-nodes! ((strategy <ids>) ns)
  ;; We suppose that the new nodes are all at the same depth
  (let ((new-nodes (maybe-make-ids-nodes strategy ns)))
    (when new-nodes
      (unless (initial-nodes strategy)
	(setf! (initial-nodes strategy) new-nodes))
      (setf! (nodes strategy)
	     (append new-nodes (nodes strategy))))))


;;; Amb and friends

(define amb-tag (make-continuation-prompt-tag 'amb))
(define amb-abort-tag (make-continuation-prompt-tag 'amb-abort))
(define amb-search-strategy (make-parameter #f))

(define-syntax amb
  (syntax-rules ()
    [(_ value ...)
     (call-with-current-continuation
      (lambda (cont)
	(debug-printf "amb: adding nodes\n")
	(add-nodes!
	 (amb-search-strategy)
	 (list (thunk
		 (debug-printf "Calling cont\n")
		 (cont value)
		 (debug-printf "Should never get here\n")) ...))
	(debug-printf "amb: failing: strategy ~a\n" (amb-search-strategy))
	(fail)
	#;(error "Amb fell through?")
	)
      amb-tag)]))


(define (amb-list lst)
  (call-with-current-continuation
   (lambda (cont)
     (debug-printf "amb-list: adding nodes\n")
     (add-nodes!
      (amb-search-strategy)
      (map (lambda (val)
	     (thunk
	      (debug-printf "Calling value cont\n")
	      (cont (val))
	      (debug-printf "Should never get here\n")))
	   lst))
     (debug-printf "amb-list: failing: strategy ~a\n"
		   (amb-search-strategy))
     (fail))
   amb-tag))

;;; Should behave identical to amb
(define-syntax amb*
  (syntax-rules ()
    [(_ value ...)
     (amb-list* (list (thunk value) ...))]))


;;; Similar to amb-list, but does not expect thunks as arguments.
;;; This behaves differently when backtracking!
(define (amb-list* lst)
  (call-with-current-continuation
   (lambda (cont)
     (debug-printf "amb-list: adding nodes\n")
     (add-nodes!
      (amb-search-strategy)
      (map (lambda (val)
	     (thunk
	      (debug-printf "Calling value cont\n")
	      (cont val)
	      (debug-printf "Should never get here\n")))
	   lst))
     (debug-printf "amb-list: failing: strategy ~a\n"
		   (amb-search-strategy))
     (fail))
   amb-tag))

(define (deliver value)
  (debug-printf "Delivering ~a\n" value)
  (call-with-current-continuation
   (lambda (cont)
     (define strategy (amb-search-strategy))
     (add-node!
      strategy
      (thunk
	(debug-printf "Continuing after delivering a value\n")
	(cont 'command-continuation)))
     (add-node!
      strategy
      (thunk
       (debug-printf "Delivering value ~a\n" value)
       (abort/cc amb-tag 'deliver value)))
     (fail)
     #;(error "Deliver fell through?")
     )
   amb-tag)
  (void))

(define (fail)
  (debug-printf "Failing\n")
  (define strategy (amb-search-strategy))
  (define cc (next-node! strategy))
  (record-failure! strategy)
  (if cc
      (abort/cc amb-tag 'cont cc)
      (abort/cc amb-abort-tag)))

(define-syntax collect
  (syntax-rules ()
    [(_ (search-strategy) body ...)
     (let ([result '()])
       (define (process-result res)
	 (let-values ([(collect-it? continue? real-value)
		       (collect-result (amb-search-strategy) res)])
	   (debug-printf "Result ~a, collect-it? ~a\n"
			 res collect-it?)
	   (when collect-it?
	     (debug-printf "Collecting result ~a\n" res)
	     (set! result (list* res result)))
	   (cond [continue?
		  (debug-printf "Continuing\n")
		  (call-with-continuation-prompt 
		   fail amb-tag amb-handler)]
		 [else
		  (abort/cc amb-abort-tag)])
	   #;(error "Fell through process-result?")
	   ))
       (define (amb-handler kind value)
	 (case kind
	   [(cont)
	    (debug-printf "In collect/cont 1: ~a\n" value)
	    (let ([res (call-with-continuation-prompt 
			value amb-tag amb-handler)])
	      (process-result res))]
	   [(deliver)
	    (debug-printf "In collect/deliver: ~a\n" value)
	    (process-result value)]
	   #;(else (error "Fell through amb-handler."))
	   ))
       (parameterize ([amb-search-strategy search-strategy])
	 (call-with-continuation-prompt
	  (thunk
	   (call-with-continuation-prompt
	    (thunk
	     (call-with-current-continuation
	      (lambda (cont)
		(add-initial-node!
		 (amb-search-strategy)
		 (thunk
		  (debug-printf "Returning Initial value\n")
		  (abort/cc amb-tag 'deliver 
			    ;; Cannot use `begin' here, since this
			    ;; results in an error when body...
			    ;; starts with a definition
			    (let () body ...))))
		(fail))
	      amb-tag)) amb-tag amb-handler))
	  amb-abort-tag
	  (thunk (reverse result)))
	 (reverse result)))]
    [(_ () body ...)
     (collect ((make <dfs>)) body ...)]))


(define (an-integer->= n)
  (amb n (an-integer->= (+ n 1))))

(define (an-integer-<= n)
  (amb n (an-integer-<= (- n 1))))

(define (an-integer-between m n)
  (amb-list*
   (for/list ([i (in-range m (add1 n))])
     i)))

(define-for-syntax (make-integer-list m n)
  (if (m . > . n)
      '()
      (cons m (make-integer-list (add1 m) n))))

(define-syntax (an-integer-between* stx)
  (syntax-case stx ()
    [(_ m n)
     #`(amb #,@(make-integer-list (syntax->datum #'m) (syntax->datum #'n)))]))

(define (an-integer-between** m n)
  (if (> m n)
      (fail)
      (amb m (an-integer-between (+ m 1) n))))

;; (an-integer-between* 1 10)

(define (a-multiple-of k)
  (let ([multiplier (an-integer->= 1)])
    (* multiplier k)))

(define (a-factor-of** k)
  (let ([i (an-integer-between 2 (floor (/ k 2)))])
    (if (zero? (modulo k i))
	i
	(fail))))

(define (a-factor-of* k)
  (let loop ([i 2])
    (cond [(zero? (modulo k i))
	   (deliver i)
	   (loop (add1 i))]
	  [(i . >= . (floor (/ k 2)))
	   (fail)]
	  [else
	   (loop (add1 i))])))

(define (a-factor-of k)
  (for ([i (in-range 2 (floor (/ k 2)))])
    (when (zero? (modulo k i))
      (deliver i)))
  (fail))

(define (an-element-of lst)
  (if (null? lst)
      (fail)
      (amb (car lst) (an-element-of (cdr lst)))))
