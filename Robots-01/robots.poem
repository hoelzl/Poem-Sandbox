#lang poem

(require "backtracking.poem")
(require "action-theory.poem")

(provide <pos> x y pos? make-pos
         <physical-object> position physical-object? position-known?
         <brick> weight brick? make-brick
         <robot> name max-load loaded-bricks robot? make-robot
	 all-robots
         available-load
         move move-up move-down move-left move-right pick-up)

(defclass <pos> ()
  x
  y
  :printer #t
  :autoaccessors :slot
  :auto #t)

(defmethod equals? ([pos1 <pos>] [pos2 <pos>])
  (and (= (x pos1) (x pos2))
       (= (y pos1) (y pos2))))


(define (pos x y)
  (make-pos x y))

(defmethod data->sexp ([pos <pos>])
  (list 'pos (x pos) (y pos)))


(defclass <physical-object> (<logical-object>)
  (name)
  (position :initvalue (make-pos 0 0) :fluent #t)
  :autoaccessors #f
  :auto #t
  :metaclass <logical-class>)

(defmethod position-known? ([obj <physical-object>])
  (and (position obj) #t))

(defmethod name ([obj <physical-object>])
  (slot-ref obj 'name))

(defmethod position ([obj <physical-object>])
  (variable-value (current-situation) (slot-ref obj 'position)))

(defmethod set-position! ([obj <physical-object>] new-value)
  (set-variable-value!
   (current-situation) (slot-ref obj 'position) new-value))

(defmethod data->sexp ([obj <physical-object>])
  (name obj))

(defclass <brick> (<physical-object>)
  (weight :initvalue 0.1 :fluent #t)
  :autoaccessors :slot
  :auto #t
  :metaclass <logical-class>)

;;; TODO: This should be stored in the current situation
(define all-robots (make-parameter empty))

(defclass <robot> (<physical-object>)
  (max-load :initvalue 0.5 :fluent #t)
  (loaded-bricks :initvalue empty :fluent #t)
  :autoaccessors :slot
  :auto #t
  :metaclass <logical-class>)

(defmethod initialize ([self <robot>] initargs)
  (call-next-method)
  (all-robots (cons self (all-robots)))
  (when (pair? (position self))
    (setf! (position self)
	   (apply make-pos (position self)))))

(defmethod pick ((type (singleton <robot>)) &opt pred)
  (if pred
      (for ([r (in-list (all-robots))])
	(when (pred r)
	  (deliver r)))
      (an-element-of (all-robots))))

(define (sum-all lst)
  (foldl + 0 lst))

(define (available-load robot)
  (- (max-load robot) (sum-all (map weight (loaded-bricks robot)))))


(define-action-type move (obj pos)
  :precondition (physical-object? obj)
  (printf "Moving object ~a to position ~a\n"
	  (name obj) (list (x pos) (y pos)))
  (setf! (position obj) pos))

(define-action-type move-up (obj)
  :precondition (physical-object? obj)
  (setf! (position obj)
	 (make-pos  (x (position obj))
		    (add1 (y (position obj))))))

(define-action-type move-down (obj)
  :precondition (physical-object? obj)
  (setf! (position obj)
	 (make-pos  (x (position obj))
		    (sub1 (y (position obj))))))

(define-action-type move-left (obj)
  :precondition (physical-object? obj)
  (setf! (position obj)
	 (make-pos  (sub1 (x (position obj)))
		    (y (position obj)))))

(define-action-type move-right (obj)
  :precondition (physical-object? obj)
  (setf! (position obj)
	 (make-pos  (add1 (x (position obj)))
		    (y (position obj)))))

(define-action-type pick-up (robot brick)
  :precondition (and (robot? robot) (brick? brick)
                     (>= (available-load robot) (weight brick)))
  (setf! (loaded-bricks robot)
	 (cons brick (loaded-bricks robot))))


(define (simple-example-01)
  (current-situation (make <situation>))
  (define r1 (make <robot> :name 'r1))
  (define r2 (make <robot> :name 'r2))
  (define r3 (make <robot> :name 'r3))
  (define (print-positions)
    (printf "Position of r1: ~a\n" (position r1))
    (printf "Position of r2: ~a\n" (position r2))
    (printf "Position of r3: ~a\n" (position r3)))
  (printf "Initial situation: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (move r1 (pos 0 0))
  (printf "Situation after moving: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (define results
    (collect () (amb (begin
		       (printf "First branch\n")
		       (print-positions)
		       (move r1 (pos 1 1))
		       (print-positions)
		       (move r2 (pos 0 2))
		       (print-positions)
		       (move r1 (pos 1 2))
		       (print-positions)
		       (printf "Situation: ~a\n"
			       (map data->sexp (actions (current-situation)))))
		     (begin
		       (printf "Second branch\n")
		       (print-positions)
		       (move r2 (pos 2 3))
		       (print-positions)
		       (move r3 (pos 1 1))
		       (print-positions)
		       (printf "Situation: ~a\n"
			       (map data->sexp (actions (current-situation))))))))
  (printf "Position of r1: ~a\n" (position r1))
  (printf "Results: ~a\n" results)
  (printf "Final situation: ~a\n"
	  (map data->sexp (actions (current-situation)))))

(define (simple-example-02)
  (current-situation (make <situation>))
  (define r1 (make <robot> :name 'r1))
  (define r2 (make <robot> :name 'r2))
  (define r3 (make <robot> :name 'r3))
  (printf "Initial situation: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (move r1 (pos 0 0))
  (printf "Situation after moving: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (define results
    (collect () (amb (begin
		       (printf "First branch\n")
		       (move r1 (pos 1 1))
		       (move r2 (pos 0 2))
		       (move r1 (pos 1 2))
		       (printf "Situation: ~a\n"
			       (map data->sexp (actions (current-situation))))
		       (map data->sexp (actions (current-situation))))
		     (begin
		       (printf "Second branch\n")
		       (move r2 (pos 2 3))
		       (move r3 (pos 1 1))
		       (printf "Situation: ~a\n"
			       (map data->sexp (actions (current-situation))))
		       (map data->sexp (actions (current-situation)))))))
  (printf "Results: ~a\n" results)
  (printf "Final situation: ~a\n"
	  (map data->sexp (actions (current-situation)))))

(define (simple-example-03)
  (current-situation (make <situation>))
  (define r1 (make <robot> :name 'r1))
  (define r2 (make <robot> :name 'r2))
  (define r3 (make <robot> :name 'r3))
  (printf "Initial situation: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (move r1 (pos 0 0))
  (printf "Situation after moving: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (define results
    (collect () (amb (begin
		       (printf "First branch\n")
		       (move r1 (pos 1 1))
		       (move r2 (pos 0 2))
		       (move r1 (pos 1 2))
		       (printf "Situation: ~a\n"
			       (map data->sexp (actions (current-situation))))
		       (freeze (current-situation)))
		     (begin
		       (printf "Second branch\n")
		       (move r2 (pos 2 3))
		       (move r3 (pos 1 1))
		       (printf "Situation: ~a\n"
			       (map data->sexp (actions (current-situation))))
		       (freeze (current-situation))))))
  (printf "Results: ~a\n" results)
  (printf "Final situation: ~a\n"
	  (map data->sexp (actions (current-situation)))))


(define (simple-example-04)
  (current-situation (make <situation>))
  (define r1 (make <robot> :name 'r1))
  (define r2 (make <robot> :name 'r2))
  (define r3 (make <robot> :name 'r3))
  (printf "Initial situation: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (move r1 (pos 0 0))
  (printf "Situation after moving: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (define (print-positions)
    (printf "Position of r1: ~a\n" (position r1))
    (printf "Position of r2: ~a\n" (position r2))
    (printf "Position of r3: ~a\n" (position r3)))
  (define results
    (collect ((make <dfs> :result-strategy (make <commit-result-strategy>)))
	     (amb (begin
		    (printf "First branch\n")
		    (print-positions)
		    (move r1 (pos 1 1))
		    (print-positions)
		    (move r2 (pos 0 2))
		    (print-positions)
		    (move r1 (pos 1 2))
		    (print-positions)
		    (printf "Situation: ~a\n"
			    (map data->sexp (actions (current-situation)))))
		  (begin
		    (printf "Second branch\n")
		    (print-positions)
		    (move r2 (pos 2 3))
		    (print-positions)
		    (move r3 (pos 1 1))
		    (print-positions)
		    (printf "Situation: ~a\n"
			    (map data->sexp (actions (current-situation))))
		    'ok))))
  (print-positions)
  (printf "Results: ~a\n" results)
  (printf "Final situation: ~a\n"
	  (map data->sexp (actions (current-situation)))))


(define (simple-example-05)
  (current-situation (make <situation>))
  (define r1 (make <robot> :name 'r1))
  (define r2 (make <robot> :name 'r2))
  (define r3 (make <robot> :name 'r3))
  (printf "Initial situation: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (move r1 (pos 0 0))
  (printf "Situation after moving: ~a\n"
	  (map data->sexp (actions (current-situation))))
  (define (print-positions)
    (printf "Position of r1: ~a\n" (position r1))
    (printf "Position of r2: ~a\n" (position r2))
    (printf "Position of r3: ~a\n" (position r3)))
  (define (all-robot-positions-known?)
    (define result
      (andmap position-known? (list r1 r2 r3)))
    (printf "all-robot-positions-known? ~a\n" result)
    result)
  (define results
    (collect ((make <dfs> :result-strategy (make <commit-result-strategy>)))
	     (amb (begin
		    (printf "First branch\n")
		    (print-positions)
		    (move r1 (pos 1 1))
		    (print-positions)
		    (move r2 (pos 0 2))
		    (print-positions)
		    (move r1 (pos 1 2))
		    (print-positions)
		    (printf "Situation: ~a\n"
			    (map data->sexp (actions (current-situation))))
		    (ensure (all-robot-positions-known?)))
		  (begin
		    (printf "Second branch (should be aborted immediately)\n")
		    (move 'something-that-cannot-be-moved (pos 1 2))
		    (move r2 (pos 2 3))
		    (print-positions)
		    (move r3 (pos 1 1))
		    (ensure (all-robot-positions-known?)))
		  (begin
		    (printf "Third branch\n")
		    (print-positions)
		    (move r2 (pos 2 3))
		    (print-positions)
		    (move r3 (pos 1 1))
		    (print-positions)
		    (printf "Situation: ~a\n"
			    (map data->sexp (actions (current-situation))))
		    (ensure (all-robot-positions-known?))))))
  (print-positions)
  (printf "Results: ~a\n" results)
  (printf "All robots: ~a\n" (map name (all-robots)))
  (printf "Final situation: ~a\n"
	  (map data->sexp (actions (current-situation)))))

