#lang poem

(require "backtracking.poem")


(define (test-11)
  (collect 
   ()
   (printf "Value: ~a\n" (amb 1 2 3))
   (printf "Before failing in test-11\n")
   (fail)
   (printf "After failing in test-11\n")))

(define (test-12)
  (collect ()
	   (printf "Result: ~a\n" (amb 1 2 (amb 'a 'b 'c) 3))
	   (fail)))

(define (test-13)
  (collect () (amb 1 2 (amb 'a 'b 'c) 3)))

(define (test-13a)
  (collect () (an-integer-between 3 6)))

(define (test-13b)
  (collect () (let ((x (an-integer-between 3 6)))
		 x)))

(define (test-13c)
  (collect () (let ((x (an-integer-between 3 6)))
		 (if (even? x)
		     x
		     (fail)))))

(define (test-13d)
  (collect () (amb 1 (fail) 2)))

(define (test-13e)
  (collect () (amb (fail) 1 2)))

(define (test-13f)
  (collect () (amb 1 (fail) 2 3 4)))

(define (test-13g)
  (collect () (amb 1 (fail) 2 3 4 (fail))))

(define (test-13h)
  (collect () (let ((x (amb 3 4 5 6)))
		 (if (even? x)
		     x
		     (fail)))))

(define (test-14)
  (collect
   ()
   (let ((x (amb 1 2 3 4 5))
	 (y (amb 2 4 6)))
     (printf "Trying: ~a\n" (list x y))
     (if (and (even? x) (even? y)
	      (>= (+ x y) 7))
	 (begin
	   (printf "Result: ~a\n" (list x y))
	   (list x y))
	 (fail)))))

(define (test-14a)
  (collect ()
   (let ((x (amb 1 2 3 4 5))
	 (y (amb 2 4 6)))
     (printf "Trying: ~a\n" (list x y))
     (if (and (even? x) (even? y)
	      (>= (+ x y) 7))
	 (list x y)
	 (fail)))))

(define (gen-numbers)
  (let ((x (amb 1 2 3 4 5))
	(y (amb 2 4 6)))
    (printf "Trying: ~a\n" (list x y))
    (if (and (even? x) (even? y)
	     (>= (+ x y) 7))
	(list x y)
	(fail))))

(define (test-14b)
  (collect ()
   (gen-numbers)))

(define (test-15)
  (collect ((make <dfs> :result-strategy (make <one-result-strategy>)))
   (let ((x (an-integer->= 1)))
     (when (< x 10)
       (fail))
     x)))

(define (test-15a)
  (collect ((make <dfs> :result-strategy (make <n-results-strategy>
					   :number-of-results 5)))
   (let ((x (an-integer->= 1)))
     (when (< x 10)
       (fail))
     x)))

(define (test-16)
  (collect
   ()
   (define my-fun (lambda args (exp (apply + args))))
   (define fun (amb + - * my-fun))
   (list (object-name fun) (fun 1 2 3 4))))

(define-syntax-rule (tests id ...)
  (list (list 'id 
	      (thunk
	       (printf "Test Result: ~a\n"
		       (call-with-continuation-prompt
			id
			(default-continuation-prompt-tag))))) ...))

(define all-tests
  (tests test-11
	 test-12 
	 test-13 test-13a test-13b test-13c test-13d
	 test-13e test-13f test-13g test-13h
	 test-14 test-14a test-14b
	 test-15
	 test-16))

(define (run-all-tests)
  (for-each (lambda (test)
	      (printf "\n\nCalling test ~a\n" (first test))
	      ((second test)))
	    all-tests))
