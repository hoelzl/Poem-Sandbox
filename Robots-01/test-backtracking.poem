#lang poem

(require "backtracking.poem")
(require (rename-in rackunit (fail fail-test)))

(define in-automated-test (make-parameter #f))
(define (test-printf . args)
  (unless (in-automated-test)
    (apply printf args)))

(define-syntax run-amb-test
  (syntax-rules ()
    ((_ fun res)
     (parameterize ((in-automated-test #t))
       (test-begin
	(check equal? (fun) res))))))

(define (test-11)
  (collect 
   ()
   (test-printf "Value: ~a\n" (amb 1 2 3))
   (test-printf "Before failing in test-11\n")
   (fail)
   (test-printf "After failing in test-11\n")))

(run-amb-test test-11 '())

(define (test-12)
  (collect ()
	   (test-printf "Result: ~a\n" (amb 1 2 (amb 'a 'b 'c) 3))
	   (fail)))

(run-amb-test test-12 '())

(define (test-13)
  (collect () (amb 1 2 (amb 'a 'b 'c) 3)))

(run-amb-test test-13 '(1 2 a b c 3))

(define (test-13a)
  (collect () (an-integer-between 3 6)))

(run-amb-test test-13a '(3 4 5 6))

(define (test-13b)
  (collect () (let ((x (an-integer-between 3 6)))
		 x)))

(run-amb-test test-13b '(3 4 5 6))

(define (test-13c)
  (collect () (let ((x (an-integer-between 3 6)))
		 (if (even? x)
		     x
		     (fail)))))

(run-amb-test test-13c '(4 6))

(define (test-13d)
  (collect () (amb 1 (fail) 2)))

(run-amb-test test-13d '(1 2))

(define (test-13e)
  (collect () (amb (fail) 1 2)))

(run-amb-test test-13e '(1 2))

(define (test-13f)
  (collect () (amb 1 (fail) 2 3 4)))

(run-amb-test test-13f '(1 2 3 4))

(define (test-13g)
  (collect () (amb 1 (fail) 2 3 4 (fail))))

(run-amb-test test-13g '(1 2 3 4))

(define (test-13h)
  (collect () (let ((x (amb 3 4 5 6)))
		 (if (even? x)
		     x
		     (fail)))))

(run-amb-test test-13h '(4 6))

(define (test-14)
  (collect ()
   (let ((x (amb 1 2 3 4 5))
	 (y (amb 2 4 6)))
     (test-printf "Trying: ~a\n" (list x y))
     (if (and (even? x) (even? y)
	      (>= (+ x y) 7))
	 (begin
	   (test-printf "Result: ~a\n" (list x y))
	   (list x y))
	 (fail)))))

(run-amb-test test-14 '((2 6) (4 4) (4 6)))

(define (test-14a)
  (collect ()
   (let ((x (amb 1 2 3 4 5 6 7 8 9 10))
	 (y (amb 2 3 4 5)))
     (test-printf "Trying: ~a\n" (list x y))
     (if (and (even? x) (even? y)
	      (>= (+ x y) 7))
	 (list x y)
	 (fail)))))

(define (gen-numbers)
  (let ((x (amb 1 2 3 4 5))
	(y (amb 2 4 6)))
    (test-printf "Trying: ~a\n" (list x y))
    (if (and (even? x) (even? y)
	     (>= (+ x y) 7))
	(list x y)
	(fail))))

(define (test-14b)
  (collect ()
   (gen-numbers)))

(define (test-15)
  (collect ((make <dfs> :result-strategy (make <one-result-strategy>)))
   (let ((x (an-integer->= 1)))
     (when (< x 10)
       (fail))
     x)))

(define (test-15a)
  (collect ((make <dfs> :result-strategy (make <n-results-strategy>
					   :number-of-results 5)))
   (let ((x (an-integer->= 1)))
     (when (< x 10)
       (fail))
     x)))

(define (test-16)
  (collect
   ()
   (define my-fun (lambda args (exp (apply + args))))
   (define fun (amb + - * my-fun))
   (list (object-name fun) (fun 1 2 3 4))))


;;; New tests

(define (test-21)
  (collect () (amb 1 2 3)))

(define (test-22)
  (collect () (amb 1 (collect () (amb 'foo 'bar 'baz)) 2 (amb 'a 'b 'c) 3)))

(define (test-23)
  (collect () (amb 1
		   (collect () (amb 'foo (fail) 'baz))
		   2
		   (fail)
		   (amb 'a 'b 'c)
		   3)))

(define (test-24)
  (collect ()
	   (amb 1 (begin (deliver 'a) (amb 4 5 6)) 2 (deliver 'b) 3)))

(define (test-25)
  (collect ()
	   (deliver 'a)
	   (deliver (amb 1 2 3))
	   (amb 'foo 'bar)))

(define (test-25a)
  (collect ((make <bfs>))
	   (deliver 'a)
	   (deliver (amb 1 2 3))
	   (amb 'foo 'bar)))

(define (test-25b)
  (collect ((make <ids>))
	   (deliver 'a)
	   (deliver (amb 1 2 3))
	   (amb 'foo 'bar)))

(define (test-25c)
  (collect ()
	   (deliver 'a)
	   (deliver (amb 1 (amb 2 3) 4))
	   (amb 'foo 'bar)))

(define (test-25d)
  (collect ((make <ids>))
	   (deliver 'a)
	   (deliver (amb 1 (amb 2 3) 4))
	   (amb 'foo 'bar)))

(define (test-25e)
  (collect ((make <ids> :result-strategy (make <one-result-strategy>)))
	   (deliver 'a)
	   (deliver (amb 1 (amb 2 3) 4))
	   (amb 'foo 'bar)))

(define (test-25f)
  (collect ((make <ids> :result-strategy (make <numeric-results-strategy>)))
	   (deliver 'a)
	   (deliver (amb 1 (amb 2 3) 4))
	   (amb 'foo 'bar)))

(define (nd)
  (display "(1) ")
  (deliver 'a)
  (display "(2) ")
  (deliver (amb 1 (amb 2 3) 4))
  (display "(3) ")
  (amb 'foo 'bar))

(define (test-25g)
  (collect () (nd)))

(define (test-25h)
  (collect ((make <dfs>)) (nd)))

(define (test-25i)
  (collect ((make <bfs>)) (nd)))

(define (test-25j)
  (collect ((make <ids>)) (nd)))

(define (test-26)
  (collect ((make <ids>)) (amb 1 2 (amb 'a (amb 'x 'y) 'b) 3)))

(define (test-26a)
  (collect ((make <ids> :result-strategy (make <one-result-strategy>)))
	   (amb 1 2 (amb 'a (amb 'x 'y) 'b) 3)))

(define-syntax-rule (tests id ...)
  (list (list 'id 
	      (thunk
	       (test-printf "Test Result: ~a\n"
		       (call-with-continuation-prompt
			id
			(default-continuation-prompt-tag))))) ...))

(define all-tests
  (tests test-11
	 test-12 
	 test-13 test-13a test-13b test-13c test-13d
	 test-13e test-13f test-13g test-13h
	 test-14 test-14a test-14b
	 test-15
	 test-16

	 test-21
	 test-22
	 test-23
	 test-24
	 test-25 test-25a test-25b test-25c test-25d test-25e test-25f
	 test-26 test-26a))

(define (run-all-tests)
  (for-each (lambda (test)
	      (test-printf "\n\nCalling test ~a\n" (first test))
	      ((second test)))
	    all-tests))

'performed-all-tests
